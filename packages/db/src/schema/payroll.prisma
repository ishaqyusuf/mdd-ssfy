enum PayrollType {
    COMMISSION
    WAGE
}

enum PayrollStatus {
    PENDING
    APPROVED
    REJECTED
    RESUBMITTED
    PAID
}

model PayrollHistory {
    id     Int           @unique @default(autoincrement())
    status PayrollStatus
    note   String

    payroll   Payroll @relation(fields: [payrollId], references: [id])
    payrollId Int

    user   Users @relation(fields: [userId], references: [id])
    userId Int

    @@index([userId])
    @@index([payrollId])
}

model Payroll {
    id          Int          @unique @default(autoincrement())
    uid         String
    amount      Float
    type        PayrollType
    headline    String?
    description String?
    status      PayoutStatus

    itemUid     String?
    itemControl SalesItemControl? @relation(fields: [itemUid], references: [uid])

    orderId Int?
    order   SalesOrders? @relation(fields: [orderId], references: [id])

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    history PayrollHistory[]

    user   Users? @relation(fields: [userId], references: [id])
    userId Int

    payoutId Int?
    payout   SalesPayout? @relation(fields: [payoutId], references: [id])

    productionSubmissionId Int?                        @unique
    productionSubmission   OrderProductionSubmissions? @relation(fields: [productionSubmissionId], references: [id])

    orderPaymentId Int?           @unique
    orderPayment   SalesPayments? @relation(fields: [orderPaymentId], references: [id])

    @@unique([uid, deletedAt])
    @@index([productionSubmissionId])
    @@index([orderId])
    @@index([userId])
    @@index([payoutId])
    @@index([itemUid])
}

model SalesPayout {
    id        Int    @id @default(autoincrement())
    reference String @unique

    payoutDate DateTime?

    method String? // e.g., 'bank_transfer', 'cash', etc.
    status PayoutStatus @default(PENDING)
    note   String?
    amount Float

    payrolls Payroll[]

    createdAt DateTime  @default(now()) @db.Timestamp(0)
    updatedAt DateTime  @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    payerId          Int
    myIssuedPayments Users? @relation(name: "myIssuedPayouts", fields: [payerId], references: [id])

    payee   Users @relation(name: "myPayouts", fields: [payeeId], references: [id])
    payeeId Int

    @@index([payeeId])
    @@index([payerId])
}

enum PayoutStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
}

model Jobs {
    id          Int       @unique @default(autoincrement())
    userId      Int
    coWorkerId  Int?
    type        String    @db.VarChar(255)
    homeId      Int?
    // unitId      Int?
    projectId   Int?
    // taskId      Int?
    amount      Float
    title       String?   @db.VarChar(255)
    subtitle    String?   @db.VarChar(255)
    description String?   @db.LongText
    note        String?   @db.Text
    // doneBy      String?      @db.VarChar(255)
    status      String    @db.VarChar(255)
    meta        Json?     @db.Json
    adminNote   String?   @db.Text
    statusDate  DateTime? @db.Timestamp(0)
    rejectedAt  DateTime? @db.Timestamp(0)
    approvedAt  DateTime? @db.Timestamp(0)
    // paidAt      DateTime?    @db.Timestamp(0)
    approvedBy  Int?
    // paidBy      Int?
    paymentId   Int?

    // checkNo     String?      @db.VarChar(255)
    deletedAt DateTime?    @db.Timestamp(0)
    createdAt DateTime?    @default(now()) @db.Timestamp(0)
    updatedAt DateTime?    @updatedAt
    payment   JobPayments? @relation(fields: [paymentId], references: [id])
    home      Homes?       @relation(fields: [homeId], references: [id])
    user      Users?       @relation(name: "installer", fields: [userId], references: [id])
    coWorker  Users?       @relation(name: "co-worker", fields: [coWorkerId], references: [id])
    project   Projects?    @relation(fields: [projectId], references: [id])
    homeTasks HomeTasks[]

    @@index([createdAt, homeId, type, status, userId])
    @@index([paymentId])
    @@index([homeId])
    @@index([userId])
    @@index([coWorkerId])
    @@index([projectId])
}

model JobPayments {
    id            Int       @unique @default(autoincrement())
    amount        Int
    charges       Int?
    subTotal      Int?
    userId        Int
    paidBy        Int
    checkNo       String?
    paymentMethod String?
    meta          Json?     @db.Json
    createdAt     DateTime? @default(now()) @db.Timestamp(0)
    updatedAt     DateTime? @updatedAt
    deletedAt     DateTime? @db.Timestamp(0)
    jobs          Jobs[]
    user          Users?    @relation(name: "worker", fields: [userId], references: [id])
    payer         Users?    @relation(name: "payer", fields: [paidBy], references: [id])

    @@index([userId])
    @@index([paidBy])
}
