model InventoryCategory {
    id          Int     @id @default(autoincrement())
    title       String
    img         String?
    uid         String
    type        String?
    description String?

    inventories                        Inventory[]
    // for shelf item
    shelfItemSubCategories             InventorySubCategory[]
    // for components
    inventoryItemSubCategories         InventoryItemSubCategory[]
    categoryVariantAttributes          InventoryCategoryVariantAttribute[] @relation(name: "inventoryCategory")
    attributedCategoryVariantAttribute InventoryCategoryVariantAttribute[] @relation(name: "valuesInventoryCategory")

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)
}

model Inventory {
    id          Int       @id @default(autoincrement())
    name        String
    img         String?
    uid         String
    stockMode   String?
    status      String?
    publishedAt DateTime?

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    inventoryCategory   InventoryCategory? @relation(fields: [inventoryCategoryId], references: [id])
    inventoryCategoryId Int

    inventoryItemSubCategories InventoryItemSubCategory[]
    variants                   InventoryVariant[]

    variantPricings   InventoryVariantPricing[]
    variantAtrributes InventoryVariantAttribute[]
    logs              InventoryLog[]
    images            InventoryImage[]

    @@index([inventoryCategoryId])
}

model InventoryVariant {
    id  Int     @id @default(autoincrement())
    img String?
    sku String?
    uid String

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    status      String?
    publishedAt DateTime?

    inventory   Inventory @relation(fields: [inventoryId], references: [id])
    inventoryId Int

    attributes       InventoryVariantAttribute[]
    stocks           InventoryStock[]
    logs             InventoryLog[]
    images           InventoryImage[]
    stockMovements   StockMovement[]
    inboundStocks    InboundShipmentItem[]
    pricing          InventoryVariantPricing?
    pricingHistories PriceHistory[]

    @@index([inventoryId])
}

model InventoryVariantAttribute {
    id Int @id @default(autoincrement())

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    inventoryVariant   InventoryVariant? @relation(fields: [inventoryVariantId], references: [id])
    inventoryVariantId Int?

    //
    inventoryCategoryVariantAttribute   InventoryCategoryVariantAttribute? @relation(fields: [inventoryCategoryVariantAttributeId], references: [id])
    inventoryCategoryVariantAttributeId Int?

    value   Inventory? @relation(fields: [valueId], references: [id])
    valueId Int?

    @@index([valueId])
    @@index([inventoryVariantId])
    @@index([inventoryCategoryVariantAttributeId])
}

model InventoryCategoryVariantAttribute {
    id Int @id @default(autoincrement())

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    inventoryCategory   InventoryCategory @relation(name: "inventoryCategory", fields: [inventoryCategoryId], references: [id])
    inventoryCategoryId Int

    valuesInventoryCategory   InventoryCategory @relation(name: "valuesInventoryCategory", fields: [valuesInventoryCategoryId], references: [id])
    valuesInventoryCategoryId Int

    variantAttributes InventoryVariantAttribute[]

    @@unique([inventoryCategoryId, valuesInventoryCategoryId])
    @@index([inventoryCategoryId])
    @@index([valuesInventoryCategoryId])
}

model InventoryVariantPricing {
    id        Int    @id @default(autoincrement())
    price     Float
    costPrice Float? // cost from supplier

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    inventoryVariant   InventoryVariant? @relation(fields: [inventoryVariantId], references: [id])
    inventoryVariantId Int?              @unique

    inventory   Inventory? @relation(fields: [inventoryId], references: [id])
    inventoryId Int?

    @@index([inventoryVariantId])
    @@index([inventoryId])
}

model PriceHistory {
    id                 Int              @id @default(autoincrement())
    inventoryVariantId Int
    inventoryVariant   InventoryVariant @relation(fields: [inventoryVariantId], references: [id])

    oldPrice     Float?
    newPrice     Float?
    oldCostPrice Float?
    newCostPrice Float?
    currency     String?

    changeReason String? // e.g., "seasonal discount", "supplier price change"
    changedBy    String? // username or user ID
    source       String? // "manual update", "inbound stock", "bulk update"

    effectiveFrom DateTime  @default(now())
    effectiveTo   DateTime?

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    @@index([inventoryVariantId])
}

// example: 
model InventoryItemSubCategory {
    id Int @id @default(autoincrement())

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    inventory   Inventory @relation(fields: [inventoryId], references: [id])
    inventoryId Int

    // for components steps
    values                    InventoryItemSubCategoryValues[]
    valuesInventoryCategory   InventoryCategory?               @relation(fields: [valuesInventoryCategoryId], references: [id])
    valuesInventoryCategoryId Int?

    // for shelf items
    inventorySubCategory   InventorySubCategory? @relation(fields: [inventorySubCategoryId], references: [id])
    inventorySubCategoryId Int?

    @@index([inventoryId])
    @@index([inventorySubCategoryId])
    @@index([valuesInventoryCategoryId])
}

// for step components
model InventoryItemSubCategoryValues {
    id Int @id @default(autoincrement())

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    inventoryItemSubCategory   InventoryItemSubCategory? @relation(fields: [inventoryItemSubCategoryId], references: [id])
    inventoryItemSubCategoryId Int?
    // @@index([inventoryCategoryId])

    @@index([inventoryItemSubCategoryId])
}

// use only for shelf items.
//example: 
// shelf item category: Jambs
// sub categories: exterior single rabbet jambs,
// select Jambs in shelf items, it loads inventorysubcategories where parentSubCatuid is null,
// select next category, it loads categories where parentUid is prev, if no categories in next, it loads products in the selected categories...
model InventorySubCategory {
    id                   Int     @id @default(autoincrement())
    title                String?
    uid                  String
    parentSubCategoryUid String?

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    parentInventoryCategory   InventoryCategory @relation(fields: [parentInventoryCategoryId], references: [id])
    parentInventoryCategoryId Int

    inventoryItemSubCategories InventoryItemSubCategory[]

    @@index([parentInventoryCategoryId])
}

model InventoryStock {
    id                 Int              @id @default(autoincrement())
    inventoryVariantId Int
    inventoryVariant   InventoryVariant @relation(fields: [inventoryVariantId], references: [id])

    quantity   Float
    location   String?
    supplierId Int?
    supplier   Supplier? @relation(fields: [supplierId], references: [id])

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    @@index([inventoryVariantId])
    @@index([supplierId])
}

model Supplier {
    id       Int               @id @default(autoincrement())
    name     String
    email    String?
    phone    String?
    address  String?
    supplies InventoryStock[]
    inbounds InboundShipment[]

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)
}

model InventoryLog {
    id                 Int              @id @default(autoincrement())
    action             String
    quantity           Float
    notes              String?
    inventoryVariantId Int
    inventoryVariant   InventoryVariant @relation(fields: [inventoryVariantId], references: [id])
    createdBy          String?

    createdAt   DateTime?  @default(now()) @db.Timestamp(0)
    updatedAt   DateTime?  @updatedAt
    deletedAt   DateTime?  @db.Timestamp(0)
    Inventory   Inventory? @relation(fields: [inventoryId], references: [id])
    inventoryId Int?

    @@index([inventoryVariantId])
    @@index([inventoryId])
}

model ImageGallery {
    id     Int               @id @default(autoincrement())
    name   String // gallery name (e.g., "Summer Collection", "Jamb Variants")
    path   String
    bucket String
    images InventoryImage[]
    // tags   ImageTag[] // searchable tags
    tags   ImageGalleryTag[]

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)
}

model ImageTags {
    id          Int               @id @default(autoincrement())
    name        String            @unique // e.g., "wood", "blue", "premium"
    galleryTags ImageGalleryTag[]
    createdAt   DateTime?         @default(now()) @db.Timestamp(0)
    updatedAt   DateTime?         @updatedAt
    deletedAt   DateTime?         @db.Timestamp(0)
}

model ImageGalleryTag {
    id             Int           @id @default(autoincrement())
    createdAt      DateTime?     @default(now()) @db.Timestamp(0)
    updatedAt      DateTime?     @updatedAt
    deletedAt      DateTime?     @db.Timestamp(0)
    ImageGallery   ImageGallery? @relation(fields: [imageGalleryId], references: [id])
    imageGalleryId Int?
    imageTag       ImageTags?    @relation(fields: [imageTagId], references: [id])
    imageTagId     Int?

    @@index([imageTagId])
    @@index([imageGalleryId])
}

// Junction table will be auto-generated by Prisma for the many-to-many relation

// Update InventoryImage to link to gallery
model InventoryImage {
    id       Int     @id @default(autoincrement())
    // url      String // image path or CDN URL
    altText  String? // optional description for accessibility
    position Int? // optional ordering for gallery

    inventoryId Int?
    inventory   Inventory? @relation(fields: [inventoryId], references: [id])

    inventoryVariantId Int?
    inventoryVariant   InventoryVariant? @relation(fields: [inventoryVariantId], references: [id])

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    imageGalleryId Int?
    imageGallery   ImageGallery? @relation(fields: [imageGalleryId], references: [id])

    @@index([inventoryId])
    @@index([inventoryVariantId])
    @@index([imageGalleryId])
}

model StockMovement {
    id                 Int              @id @default(autoincrement())
    inventoryVariantId Int
    inventoryVariant   InventoryVariant @relation(fields: [inventoryVariantId], references: [id])

    prevQty    Float
    currentQty Float
    changeQty  Float // currentQty - prevQty

    type      StockMovementType // adjustment, stock_in, stock_out, sale, return, etc.
    status    StockMovementStatus // pending, low_stock, completed
    reference String? // e.g., invoice ID, order number
    notes     String?

    authorName String? // who performed the action

    // NEW: Link to inbound stock if this movement came from a supplier order
    inboundStockItemId Int?
    inboundStockItem   InboundShipmentItem? @relation(fields: [inboundStockItemId], references: [id])

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    @@index([inventoryVariantId])
    @@index([inboundStockItemId])
}

enum InboundStatus {
    pending
    in_progress
    completed
    cancelled
}

enum StockMovementType {
    adjustment
    stock_in
    stock_out
    sale
    return
    initial_stock
}

enum StockMovementStatus {
    pending
    low_stock
    completed
}

model InboundShipment {
    id         Int      @id @default(autoincrement())
    supplierId Int
    supplier   Supplier @relation(fields: [supplierId], references: [id])

    status     InboundStatus // pending, in_progress, completed, cancelled
    expectedAt DateTime?
    receivedAt DateTime?
    reference  String?
    totalValue Float?
    progress   Float? // percentage completion

    items InboundShipmentItem[]

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    @@index([supplierId])
}

model InboundShipmentItem {
    id        Int             @id @default(autoincrement())
    inboundId Int
    inbound   InboundShipment @relation(fields: [inboundId], references: [id])

    inventoryVariantId Int
    inventoryVariant   InventoryVariant @relation(fields: [inventoryVariantId], references: [id])

    quantity  Float
    unitPrice Float?

    // NEW: one-to-one link to StockMovement for auditing
    stockMovement StockMovement[]

    createdAt DateTime? @default(now()) @db.Timestamp(0)
    updatedAt DateTime? @updatedAt
    deletedAt DateTime? @db.Timestamp(0)

    @@index([inboundId])
    @@index([inventoryVariantId])
}
