{
  "version": 3,
  "sources": ["../../../../../trigger.config.ts", "../../../../../../../node_modules/@prisma/instrumentation/dist/index.mjs"],
  "sourcesContent": ["import { defineConfig } from \"@trigger.dev/sdk/v3\";\nimport { syncVercelEnvVars } from \"@trigger.dev/build/extensions/core\";\nimport { prismaExtension } from \"@trigger.dev/build/extensions/prisma\";\nimport { PrismaInstrumentation } from \"@prisma/instrumentation\";\n\nexport default defineConfig({\n  project: process.env.TRIGGER_PROJECT_ID!,\n  runtime: \"node\",\n  logLevel: \"log\",\n  maxDuration: 60,\n  retries: {\n    enabledInDev: false,\n    default: {\n      maxAttempts: 3,\n      minTimeoutInMs: 1000,\n      maxTimeoutInMs: 10000,\n      factor: 2,\n      randomize: true,\n    },\n  },\n  build: {},\n  dirs: [\"./src/tasks\"],\n  instrumentations: [new PrismaInstrumentation()],\n});\nexport const resolveEnvVars = undefined;", "// src/PrismaInstrumentation.ts\nimport { trace as trace2 } from \"@opentelemetry/api\";\nimport {\n  InstrumentationBase,\n  InstrumentationNodeModuleDefinition\n} from \"@opentelemetry/instrumentation\";\n\n// src/ActiveTracingHelper.ts\nimport {\n  context as _context,\n  SpanKind,\n  trace\n} from \"@opentelemetry/api\";\nvar showAllTraces = process.env.PRISMA_SHOW_ALL_TRACES === \"true\";\nvar nonSampledTraceParent = `00-10-10-00`;\nfunction engineSpanKindToOtelSpanKind(engineSpanKind) {\n  switch (engineSpanKind) {\n    case \"client\":\n      return SpanKind.CLIENT;\n    case \"internal\":\n    default:\n      return SpanKind.INTERNAL;\n  }\n}\nvar ActiveTracingHelper = class {\n  traceMiddleware;\n  tracerProvider;\n  ignoreSpanTypes;\n  constructor({ traceMiddleware, tracerProvider, ignoreSpanTypes }) {\n    this.traceMiddleware = traceMiddleware;\n    this.tracerProvider = tracerProvider;\n    this.ignoreSpanTypes = ignoreSpanTypes;\n  }\n  isEnabled() {\n    return true;\n  }\n  getTraceParent(context) {\n    const span = trace.getSpanContext(context ?? _context.active());\n    if (span) {\n      return `00-${span.traceId}-${span.spanId}-0${span.traceFlags}`;\n    }\n    return nonSampledTraceParent;\n  }\n  dispatchEngineSpans(spans) {\n    const tracer = this.tracerProvider.getTracer(\"prisma\");\n    const linkIds = /* @__PURE__ */ new Map();\n    const roots = spans.filter((span) => span.parentId === null);\n    for (const root of roots) {\n      dispatchEngineSpan(tracer, root, spans, linkIds, this.ignoreSpanTypes);\n    }\n  }\n  getActiveContext() {\n    return _context.active();\n  }\n  runInChildSpan(options, callback) {\n    if (typeof options === \"string\") {\n      options = { name: options };\n    }\n    if (options.internal && !showAllTraces) {\n      return callback();\n    }\n    if (options.middleware && !this.traceMiddleware) {\n      return callback();\n    }\n    const tracer = this.tracerProvider.getTracer(\"prisma\");\n    const context = options.context ?? this.getActiveContext();\n    const name = `prisma:client:${options.name}`;\n    if (shouldIgnoreSpan(name, this.ignoreSpanTypes)) {\n      return callback();\n    }\n    if (options.active === false) {\n      const span = tracer.startSpan(name, options, context);\n      return endSpan(span, callback(span, context));\n    }\n    return tracer.startActiveSpan(name, options, (span) => endSpan(span, callback(span, context)));\n  }\n};\nfunction dispatchEngineSpan(tracer, engineSpan, allSpans, linkIds, ignoreSpanTypes) {\n  if (shouldIgnoreSpan(engineSpan.name, ignoreSpanTypes)) return;\n  const spanOptions = {\n    attributes: engineSpan.attributes,\n    kind: engineSpanKindToOtelSpanKind(engineSpan.kind),\n    startTime: engineSpan.startTime\n  };\n  tracer.startActiveSpan(engineSpan.name, spanOptions, (span) => {\n    linkIds.set(engineSpan.id, span.spanContext().spanId);\n    if (engineSpan.links) {\n      span.addLinks(\n        engineSpan.links.flatMap((link) => {\n          const linkedId = linkIds.get(link);\n          if (!linkedId) {\n            return [];\n          }\n          return {\n            context: {\n              spanId: linkedId,\n              traceId: span.spanContext().traceId,\n              traceFlags: span.spanContext().traceFlags\n            }\n          };\n        })\n      );\n    }\n    const children = allSpans.filter((s) => s.parentId === engineSpan.id);\n    for (const child of children) {\n      dispatchEngineSpan(tracer, child, allSpans, linkIds, ignoreSpanTypes);\n    }\n    span.end(engineSpan.endTime);\n  });\n}\nfunction endSpan(span, result) {\n  if (isPromiseLike(result)) {\n    return result.then(\n      (value) => {\n        span.end();\n        return value;\n      },\n      (reason) => {\n        span.end();\n        throw reason;\n      }\n    );\n  }\n  span.end();\n  return result;\n}\nfunction isPromiseLike(value) {\n  return value != null && typeof value[\"then\"] === \"function\";\n}\nfunction shouldIgnoreSpan(spanName, ignoreSpanTypes) {\n  return ignoreSpanTypes.some(\n    (pattern) => typeof pattern === \"string\" ? pattern === spanName : pattern.test(spanName)\n  );\n}\n\n// package.json\nvar package_default = {\n  name: \"@prisma/instrumentation\",\n  version: \"6.11.1\",\n  description: \"OpenTelemetry compliant instrumentation for Prisma Client\",\n  main: \"dist/index.js\",\n  module: \"dist/index.mjs\",\n  types: \"dist/index.d.ts\",\n  exports: {\n    \".\": {\n      require: {\n        types: \"./dist/index.d.ts\",\n        default: \"./dist/index.js\"\n      },\n      import: {\n        types: \"./dist/index.d.ts\",\n        default: \"./dist/index.mjs\"\n      }\n    }\n  },\n  license: \"Apache-2.0\",\n  homepage: \"https://www.prisma.io\",\n  repository: {\n    type: \"git\",\n    url: \"https://github.com/prisma/prisma.git\",\n    directory: \"packages/instrumentation\"\n  },\n  bugs: \"https://github.com/prisma/prisma/issues\",\n  devDependencies: {\n    \"@prisma/internals\": \"workspace:*\",\n    \"@swc/core\": \"1.11.5\",\n    \"@types/jest\": \"29.5.14\",\n    \"@types/node\": \"18.19.76\",\n    \"@opentelemetry/api\": \"1.9.0\",\n    jest: \"29.7.0\",\n    \"jest-junit\": \"16.0.0\",\n    typescript: \"5.4.5\"\n  },\n  dependencies: {\n    \"@opentelemetry/instrumentation\": \"^0.52.0 || ^0.53.0 || ^0.54.0 || ^0.55.0 || ^0.56.0 || ^0.57.0\"\n  },\n  peerDependencies: {\n    \"@opentelemetry/api\": \"^1.8\"\n  },\n  files: [\n    \"dist\"\n  ],\n  keywords: [\n    \"prisma\",\n    \"instrumentation\",\n    \"opentelemetry\",\n    \"otel\"\n  ],\n  scripts: {\n    dev: \"DEV=true tsx helpers/build.ts\",\n    build: \"tsx helpers/build.ts\",\n    prepublishOnly: \"pnpm run build\",\n    test: \"jest\"\n  },\n  sideEffects: false\n};\n\n// src/constants.ts\nvar VERSION = package_default.version;\nvar majorVersion = VERSION.split(\".\")[0];\nvar GLOBAL_INSTRUMENTATION_ACCESSOR_KEY = \"PRISMA_INSTRUMENTATION\";\nvar GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY = `V${majorVersion}_PRISMA_INSTRUMENTATION`;\nvar NAME = package_default.name;\nvar MODULE_NAME = \"@prisma/client\";\n\n// src/PrismaInstrumentation.ts\nvar PrismaInstrumentation = class extends InstrumentationBase {\n  tracerProvider;\n  constructor(config = {}) {\n    super(NAME, VERSION, config);\n  }\n  setTracerProvider(tracerProvider) {\n    this.tracerProvider = tracerProvider;\n  }\n  init() {\n    const module = new InstrumentationNodeModuleDefinition(MODULE_NAME, [VERSION]);\n    return [module];\n  }\n  enable() {\n    const config = this._config;\n    const globalValue = {\n      helper: new ActiveTracingHelper({\n        traceMiddleware: config.middleware ?? false,\n        tracerProvider: this.tracerProvider ?? trace2.getTracerProvider(),\n        ignoreSpanTypes: config.ignoreSpanTypes ?? []\n      })\n    };\n    global[GLOBAL_INSTRUMENTATION_ACCESSOR_KEY] = globalValue;\n    global[GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY] = globalValue;\n  }\n  disable() {\n    delete global[GLOBAL_INSTRUMENTATION_ACCESSOR_KEY];\n    delete global[GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY];\n  }\n  isEnabled() {\n    return Boolean(global[GLOBAL_VERSIONED_INSTRUMENTATION_ACCESSOR_KEY]);\n  }\n};\n\n// src/index.ts\nimport { registerInstrumentations } from \"@opentelemetry/instrumentation\";\nexport {\n  PrismaInstrumentation,\n  registerInstrumentations\n};\n"],
  "mappings": "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",
  "names": ["init_esm", "context"]
}
